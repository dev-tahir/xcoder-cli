Project:XCODER-CLI
Description:PROJECT DESCRIPTION
technology:Unknown
PROJECT FILES INDEX:
1. README.md
2. TaskFlowTextManager.py
3. function_analyzer.py
4. project_chat.py
5. project_manager.py
6. project_scanner.py
7. technology_detector.py
8. unknown.txt

All functions:
1F. PROJECT SCANNING
Scans a project directory to identify technologies used, dependencies, and potential issues, while respecting ignore patterns defined in .gitignore and technology-specific files.
Files(Index) Flow: 6
Implementation:
File 6: Defines the core project scanning logic, loading ignore patterns from .gitignore, identifying technologies, and potentially analyzing function definitions; It utilizes classes and dataclasses for project file and information representation, employing the `IgnorePatternManager` to handle excluded files based on gitignore and technology-specific rules, ultimately creating `ProjectInfo` with identified technologies.
File 6_detail: Specifically, `IgnorePatternManager` loads and manages ignore patterns, while the rest of the file uses these patterns to exclude specific file paths during the scanning process; It also contains `ProjectFile`, `ProjectInfo` dataclasses and relies on external modules like `technology_detector` and `function_analyzer` (though not fully shown here) to perform more advanced technology and code analysis.

2F. TECHNOLOGY DETECTION
Identifies the programming languages, frameworks, and libraries used within the project using both rule-based detection based on file names/extensions and AI-based analysis.
Files(Index) Flow: 6 -> 7
Implementation:
File 6: Defines the project structure (ProjectFile, ProjectInfo) and handles ignore patterns, but it primarily calls `technology_detector.py` to detect the project technologies.
File 7: Contains the `TechnologyDetector` class which implements the core technology detection logic, including rule-based analysis and calls to an AI service to determine the technologies used in a project, and returns a list of `TechnologyInfo` objects.

3F. TASKFLOW TEXT MANAGEMENT
Parses a text file containing project information, including project name, description, technology, file details, and function definitions, to create an in-memory representation of a task flow, enabling automated workflow or project execution.
Files(Index) Flow: -> ->
Implementation:
File 2: Parses a text file (defaulting to 'paste.txt') to extract project metadata, file information, and function definitions, storing them in internal dictionaries.
File 2_TaskFlowTextManager: The main class that encapsulates the text parsing logic and stores project information.
File 2_TaskFlowTextManager.load_project(): Loads the project data from the specified text file and calls _parse_content to process it.
File 2_TaskFlowTextManager._parse_content(): Parses the content of the text file line by line, extracting project metadata (name, description, technology), file information, and potentially function definitions, based on line prefixes like 'Project:', 'Description:', and 'technology:'.  Currently only parses header information but provides extensibility for parsing Files and Functions.

4F. PROJECT MANAGEMENT
Provides tools for managing the project, including tasks, resources, and dependencies. The `quick_setup` function within `project_manager.py` enables interactive project configuration, allowing users to define project name, files, and functions. It loads existing project data from 'project-file.txt', prompts the user to add new functions with their name, description, involved files, and implementation details, and then saves the updated project configuration back to 'project-file.txt'.
Files(Index) Flow: -> ->
Implementation:
File 5: The `project_manager.py` file implements the core PROJECT MANAGEMENT functionality through the `quick_setup` function, which interacts with the user to define a new project or modify an existing one by loading, editing, and saving project information to a text file.
File task_flow_text_manager: The `task_flow_text_manager.py` file (referenced via import) provides the `TaskFlowTextManager` class which is used by `project_manager.py` to load project data, add new functions, and save the modified project data; it's integral to managing the project's configuration.

5F. FUNCTION ANALYSIS
Analyzes the functionality of code within the project, potentially to understand its purpose or identify potential vulnerabilities.
Files(Index) Flow: 3 3 -> 3
Implementation:
File 3: The `function_analyzer.py` file contains the `FunctionAnalyzer` class that orchestrates the entire function analysis process, including identifying, detailing, and mapping file flows of different functions within a project.

6F. PROJECT CHAT INTERFACE
Offers a chat-based interface for interacting with the project, enabling information querying, action triggering, and feedback provision, managed through a conversational context and integration with a language model API.
Files(Index) Flow: ->
Implementation:
File 4: This file, `project_chat.py`, implements the core logic for the project chat interface, including managing conversation context, initializing the project, and interacting with a language model API (Gemini) for processing user requests and suggesting code changes; it defines classes for representing file changes (`FileChange`), conversation context (`ConversationContext`), and the chat manager (`ProjectChatManager`).
